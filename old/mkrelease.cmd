@echo off
SETLOCAL ENABLEDELAYEDEXPANSION
REM  Script for committing a release
REM  The script checks that the git status is not headless
REM  Asks for confirmation of releasing with outstanding commits
REM  Asks for confirmation of releasing a non main/master branch
REM  Creates the Release file containing the release version, adding it to the staging area
REM  Runs a commit pre loaded with an initial message containing the release version
REM  this protects against committing over a day boundary
REM  If the commit fails, the Release file is restored to its previous value
REM
REM  The release version is of the form
REM  yyyy.mm.dd rnnn    yyyy.mm.dd rnnn is the date in UTC, leading 0s are omitted
REM                     rnnn is the release number
::
set DEF_VER_FILE=_version.h
set CFG_FILE=version.in
:: --------------------
:CHECK_ARGS
:: --------------------
set SCRIPTNAME=%~n0
set TAG_NUM=
set TEMPALTE=
set MESSAGE=
:: Console output only
IF [%1] == [] GOTO START

if /I "%~1" == "-v" (echo %SCRIPTNAME%: Ver _REVISION_) & goto :eof
if /I "%~1" == "-h" goto USAGE
:optloop
set OPT=%~1
if "%OPT:~0,1%" == "-" (
    if /I "%OPT%" == "-f" set forceCOMMIT=1 & SHIFT & goto optloop
    if /I "%OPT%" == "-r" if not defined TAG_NUM if "%~2" neq "" set TAG_NUM=%~2& SHIFT & SHIFT & goto optloop
    if /I "%OPT%" == "-m" if not defined MESSAGE if "%~2" neq "" set MESSAGE=%~2& SHIFT & SHIFT & goto optloop
    goto USAGE
)
if "%OPT%" neq "" set VER_FILE=%OPT%& shift
if "%~1" == "" goto START

:: --------------------
:USAGE
:: --------------------
ECHO usage: %SCRIPTNAME% -v ^| -h ^| [-r number] [-f] [-m message]
ECHO.
ECHO  -v          - displays script version information
ECHO  -r number   - set release number explicitly
ECHO  -h          - displays this output
ECHO  -f          - force commit
ECHO  -m          - set message, skipping editor
ECHO  The default version file is %DEF_VER_FILE% as a C/C++ header
ECHO  %CFG_FILE% can be used to change these defaults
ECHO.
GOTO :EOF


REM ===================
REM Entry Point
REM ===================
:START
rem check for configuration file
if exist %CFG_FILE% (
    for /f %%A in (%CFG_FILE%) do (
        if "%%A" neq "" (
            if "!SKIP!" neq "" set TEMPLATE=1& goto :endTemplate
            set firstLine=%%A
            if  "!firstLine:~0,1!" == "[" (
                set SKIP=skip=1
                for /f "delims=[]" %%Z in ("!firstLine!") do set VER_FILE=%%Z
            ) else (
                set TEMPLATE=1
                goto :endTemplate
            )
        )
    )
)
:endTemplate
if not defined VER_FILE set VER_FILE=%DEF_VER_FILE%

CALL :GET_BRANCH

if not defined GIT_BRANCH  echo Cannot continue. Git failed & exit /b 1
if "%GIT_BRANCH%" == "HEAD" echo Cannot continue. Fix headless state before retrying & exit /b 1
if defined forceCOMMIT goto doCOMMIT
if defined DIRTY call :askYN YN "Outstanding Commits. Continue anyway y/N" & if [!YN!] neq [y] goto :eof
if [%GIT_BRANCH%] neq [master] if [%GIT_BRANCH%] neq [main] call :askYN YN "Not on master/main branch. Continue anyway y/N" & if [!YN!] neq [y] goto :eof
:doCOMMIT

call :gmtNow CTIME GIT_VERSION
echo %CTIME%
call :GET_VERSION_STRING 
call :WRITE_OUT

exit /b 0



REM ====================
REM FUNCTIONS
REM ====================
:: --------------------
:GET_BRANCH
:: --------------------
:: Get which branch we are on and whether any outstanding commits in current tree
for /f "tokens=1-3 delims=.: " %%A in ('"git status -s -b -uno -- . 2>&1"') do (
    if [%%A] == [fatal] goto :EOF
    if [%%A] == [##] (
        set GIT_BRANCH=%%B
    ) else if "%%B.%%C" neq "%VER_FILE%" if [%%A%%B] neq [] (
            set DIRTY=1
            goto :EOF
    )
)
goto :EOF

:GET_VERSION_STRING
for /f %%I in ("%CD%") do set TAG_PREFIX=%%~nxI
if not defined TAG_NUM call :getTagNum
set GIT_VERSION=!GIT_VERSION!.%TAG_NUM%
if [%GIT_BRANCH%] neq [master] if [%GIT_BRANCH%] neq [main] (
    set GIT_VERSION=%GIT_BRANCH%-%GIT_VERSION%
)
goto :EOF

:WRITE_OUT
:: -------
:: create header file
if exist "%VER_FILE%" move /Y "%VER_FILE%" "%VER_FILE%.old"

if not defined TEMPLATE (
    ECHO // Autogenerated version file>"%VER_FILE%"
    ECHO #define GIT_VERSION     "%GIT_VERSION%">>"%VER_FILE%"
) else (
    for /f "%SKIP% delims=" %%L in (%CFG_FILE%) do (
        set LINE=%%L
        set LINE=!LINE:@V@=%GIT_VERSION%!
        echo !LINE:@D@=%CTIME:T= %!>>%VER_FILE%
    )
)
git add %VER_FILE%
:: clear any error
verify >NUL
if defined MESSAGE (
    git commit -m "%GIT_VERSION%: %MESSAGE%" --date=%CTIME% -- .
) else (
    git commit -m "%GIT_VERSION%:" -e --date =%CTIME% -- . 
)
if ERRORLEVEL 1 (
    if exist "%VER_FILE%.old" (
       move /Y "%VER_FILE%.old" "%VER_FILE%"
    ) else del "%VER_FILE%
) else (
    del /q %VER_FILE%.old
    git tag -a -m "Release %TAG_PREFIX% - %GIT_VERSION%" "%TAG_PREFIX%-r%TAG_NUM%"
    if ERRORLEVEL 1 echo tag error, fix manually.
)
goto :EOF

:askYN  yn prompt
setlocal
set /p YN=%~2?
set YN=%YN%X
if /i [%YN:~0,1%] == [y] set YN=y
endlocal & set %1=%YN%
goto :eof




:gmtNow time ver
setlocal
:: wmic leave milliseconds blank and FOR doesn't pick this up so tokens adjusted accordingly
for /f "tokens=2,4,5,6,8,10 skip=1 delims=," %%A in ('wmic path Win32_UTCTime get /format:csv') do (
    set /a m=100+%%D
    set /a d=100+%%A
    set /a h=100+%%B
    set /a n=100+%%C
    set /a s=100+%%E
    set /a y=10000+%%F
    set v=%%F.%%D.%%A
)
endlocal & set %1=%y:~-4%-%m:~-2%-%d:~-2%T%h:~-2%:%n:~-2%:%s:~-2% & set %2=%v%
goto :eof

:getTagNum
for /f %%I in ('git tag -l -i "%TAG_PREFIX%-r[1-9]*" --sort=-creatordate') do set TAG=%%I& goto :done
:done
if defined TAG (
    set /A TAG_NUM=!TAG:%TAG_PREFIX%-r=! + 1
) else (
    set TAG_NUM=1
)
goto :eof

